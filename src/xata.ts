// Generated by Xata Codegen 0.26.9. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "clients",
    columns: [
      { name: "name", type: "string" },
      { name: "email", type: "email" },
      { name: "amountOfOrders", type: "int", notNull: true, defaultValue: "0" },
    ],
    revLinks: [{ column: "client", table: "orders" }],
  },
  {
    name: "orders",
    columns: [
      { name: "client", type: "link", link: { table: "clients" } },
      { name: "totalAmount", type: "float" },
      { name: "averageUnitPrice", type: "float" },
      { name: "totalUnits", type: "int" },
      { name: "orderDate", type: "string" },
    ],
    revLinks: [{ column: "orders", table: "order_details" }],
  },
  {
    name: "order_details",
    columns: [
      { name: "orders", type: "link", link: { table: "orders" } },
      { name: "units", type: "int" },
      { name: "garmentType", type: "string" },
      { name: "garmentBrand", type: "string" },
      { name: "garmentCode", type: "string" },
      { name: "garmentColor", type: "string" },
      { name: "unitPrice", type: "float" },
      { name: "subtotal", type: "float" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Clients = InferredTypes["clients"];
export type ClientsRecord = Clients & XataRecord;

export type Orders = InferredTypes["orders"];
export type OrdersRecord = Orders & XataRecord;

export type OrderDetails = InferredTypes["order_details"];
export type OrderDetailsRecord = OrderDetails & XataRecord;

export type DatabaseSchema = {
  clients: ClientsRecord;
  orders: OrdersRecord;
  order_details: OrderDetailsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://Albert-s-workspace-p2ne49.us-east-1.xata.sh/db/entele",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
